}
res_proportion <- tempted_all(count_table/rowSums(count_table), meta_table$day_of_life, meta_table$studyid,
threshold=0.95, transform="clr", pseudo_count=NULL,
r=3, smooth=1e-5)
plot_time_loading(res_proportion)
plot_time_loading(res_proportion, r=2)
plot_metafeature(res_proportion$metafeature.aggregate, meta_table$delivery)
plot_metafeature(res_proportion$metafeature.aggregate, meta_table[,c("studyID", "delivery")])
plot_metafeature(res_proportion$metafeature.aggregate, meta_table[,c("studyid", "delivery")])
plot_metafeature(res_proportion$metafeature.aggregate, meta_table[,c("studyid", "delivery")], bws=3)
plot_metafeature(res_proportion$metafeature.aggregate, meta_table[,c("studyid", "delivery")], bws=8)
plot_metafeature(res_proportion$metafeature.aggregate, meta_table[,c("studyid", "delivery")], bws=30)
plot_metafeature(res_proportion$metafeature.ratio, meta_table[,c("studyid", "delivery")], bws=30)
metafeature=res_proportion$metafeature.aggregate
group <- meta_table[,c("studyid", "delivery")]
coverage=0.95
bws=30
nrow=1
colnames(group) <- c("subID", "group")
tab_feat_ratio <- merge(metafeature, group, by="subID")
dim(tab_feat_ratio)
dim(metafeature)
colnames(metafeature)
colnames(grouop)
colnames(group)
summary(group$subID)
group$subID <- as.factor(group$subID)
summary(tab_feat_ratio$subID)
colnames(group) <- c("subID", "group")
tab_feat_ratio <- merge(metafeature, group, by="subID")
## summed up, by mean and sd
reshape_feat_ratio <- reshape(tab_feat_ratio,
idvar=c("subID","timepoint") ,
v.names=c("value"), timevar="PC",
direction="wide")
dim(tab_feat_ratio)
group$subID <- as.character(group$subID)
colnames(group) <- c("subID", "group")
tab_feat_ratio <- merge(metafeature, group, by="subID")
dim(tab_feat_ratio)
unique(group$subID)
unique(metafeature$subID)
tab_feat_ratio <- merge(metafeature, group, by="subID")
dim(metafeature)
dim(tab_feat_ratio)
head(tab_feat_ratio)
head(metafeature)
rownames(group)
rownames(group) <- NULL
rownames(meta_fea)
rownames(metafeature)
tab_feat_ratio <- merge(metafeature, group, by="subID")
dim(tab_feat_ratio)
rownames(metafeature) <- NULL
tab_feat_ratio <- merge(metafeature, group, by="subID")
dim(tab_feat_ratio)
rownames(group)
dim(group)
group <- unique(group)
dim(group)
colnames(group) <- c("subID", "group")
tab_feat_ratio <- merge(metafeature, group, by="subID")
dim(tab_feat_ratio)
plot_metafeature(res_proportion$metafeature.ratio, unique(meta_table[,c("studyid", "delivery"))], bws=30)
plot_metafeature(res_proportion$metafeature.ratio, unique(meta_table[,c("studyid", "delivery")]), bws=30)
plot_metafeature(res_proportion$metafeature.aggregate, unique(meta_table[,c("studyid", "delivery")]), bws=30)
format_tempted
head(format_tempted())
head(format_tempted
)
class(meta_table$studyid)
meta_table$studyid <- as.character(meta_table$studyid)
save(meta_table, file="data/meta_table.rda")
class(meta_table$studyid)
head(format_tempted())
head(format_tempted)
datlist <- format_tempted(count_table, meta_table$day_of_life, meta_table$studyid,
pseudo_count=0.5, transform="clr")
mean_svd <- svd_centralize(datlist, r=1)
res_tempted <- tempted(mean_svd$datlist, r=3, smooth=1e-5)
plot_time_loading(res_tempted)
plot_time_loading(res_tempted, r=2)
datlist <- format_tempted(processed_table, meta_table$day_of_life, meta_table$studyid,
pseudo_count=NULL, transform="none")
mean_svd <- svd_centralize(datlist, r=1)
res_tempted <- tempted(mean_svd$datlist, r=3, smooth=1e-5)
plot_time_loading(res_tempted)
plot_time_loading(res_tempted, r=2)
plot_metafeature(res_tempted, unique(meta_table[,c("studyid", "delivery")]), bws=30)
group <- unique(meta_table[,c("studyid", "delivery")])
plot_metafeature(res_tempted, group, bws=30)
plot_time_loading(res_tempted, r=2)
plot_metafeature(res_tempted$metafeature.aggregate, group, bws=30)
dim(res_tempted$metafeature.aggregate)
names(res_tempted)
plot_time_loading(res_proportion)
plot_metafeature(res_proportion, group, bws=30)
plot_metafeature(res_proportion$metafeature.aggregate, group, bws=30)
plot_feature_summary(count_table/rowSums(count_table)[,1:3],
meta_table$day_of_life, meta_table$delivery, bws=30)
plot_feature_summary((count_table/rowSums(count_table))[,1:3],
meta_table$day_of_life, meta_table$delivery, bws=30)
plot_feature_summary((count_table/rowSums(count_table))[,c("OTU4447072", "OTU4447447")],
meta_table$day_of_life, meta_table$delivery, bws=30)
colnames(count_table)
plot_feature_summary((count_table/rowSums(count_table))[,c("OTU4447072", "OTU4467447")],
meta_table$day_of_life, meta_table$delivery, bws=30)
datlist <- format_tempted(count_table, meta_table$day_of_life, meta_table$studyid,
pseudo_count=0.5, transform="clr")
mean_svd <- svd_centralize(datlist, r=1)
res_tempted <- tempted(mean_svd$datlist, r=3, smooth=1e-5)
datlist_raw <- format_tempted(count_table, meta_table$day_of_life, meta_table$studyid,
transform="none")
contrast <- cbind(c(1,1,0), c(1,-1,0))
res_ratio <- ratio_feature(res_tempted, datlist_raw, pct=0.1,
absolute=FALSE, contrast=contrast)
group <- unique(meta_table[, c("studyid", "delivery")])
plot_metafeature(res_ratio$metafeature.ratio, group)
plot_metafeature(res_ratio$metafeature.ratio, group, bws=30)
res_aggregate <- aggregate_feature(res_tempted, datlist_raw, pct=0.1,
absolute=FALSE, contrast=contrast)
res_aggregate <- aggregate_feature(res_tempted, datlist_raw, pct=0.1,
contrast=contrast)
res_aggregate <- aggregate_feature(res_tempted, mean_svd, datlist, pct=1,
#' contrast=contrast)
plot_metafeature(res_aggregate$metafeature.aggregate, group, bws=30)
)
res_aggregate <- aggregate_feature(res_tempted, mean_svd, datlist, pct=1,
contrast=contrast)
plot_metafeature(res_aggregate$metafeature.aggregate, group, bws=30)
contrast <- cbind(c(1/2,1,0), c(1/2,-1,0))
res_aggregate <- aggregate_feature(res_tempted, mean_svd, datlist, pct=1,
contrast=contrast)
plot_metafeature(res_aggregate$metafeature.aggregate, group, bws=30)
count_train <- count_table[-(1:5),]
meta_train <- meta_table[-(1:5),]
count_test <- count_table[1:5,]
meta_test <- meta_table[1:5,]
datlist_train <- format_tempted(count_train, meta_train$day_of_life, meta_train$studyid,
pseudo_count=0.5, transform="clr")
mean_svd_train <- svd_centralize(datlist_train, r=1)
res_tempted_train <- tempted(mean_svd_train$datlist, r=3, smooth=1e-5)
datlist_test <- format_tempted(count_test, meta_test$day_of_life, meta_test$studyid,
pseudo_count=0.5, transform="clr")
id_test <- meta_table$studyid=="1"
count_train <- count_table[!id_test,]
meta_train <- meta_table[!id_test,]
count_test <- count_table[id_test,]
meta_test <- meta_table[id_test,]
datlist_train <- format_tempted(count_train, meta_train$day_of_life, meta_train$studyid,
pseudo_count=0.5, transform="clr")
mean_svd_train <- svd_centralize(datlist_train, r=1)
res_tempted_train <- tempted(mean_svd_train$datlist, r=3, smooth=1e-5)
datlist_test <- format_tempted(count_test, meta_test$day_of_life, meta_test$studyid,
pseudo_count=0.5, transform="clr")
sub_test <- est_test_subject(datlist_test, res_tempted_train, mean_svd_train)
count_test <- count_test[,rownames(datlist_train[[1]])[-1]]
datlist_test <- format_tempted(count_test, meta_test$day_of_life, meta_test$studyid,
threshold=1, pseudo_count=0.5, transform="clr")
sub_test <- est_test_subject(datlist_test, res_tempted_train, mean_svd_train)
dim(datlist_test[[1]])
dim(datlist_train[[1]])
dim(count_test)
#' \code{"logit"} for logit transformation.
#' \code{"none"} for no transformation.
#' Default \code{transform="clr"} is recommended for microbiome data.
#' For data that are already transformed, use \code{transform="none"}.
#' @return A length n list of matrices as the input of \code{\link{tempted}} and \code{\link{svd_centralize}}.
#' Each matrix represents a subject,
#' with columns representing samples from this subject,
#' the first row representing the sampling time points,
#' and the following rows representing the feature values.
#' @examples See \code{\link{tempted}}.
format_tempted <- function(feature_table, time_point, subjectID,
threshold=0.95, pseudo_count=NULL, transform="clr"){
ntm <- which(table(subjectID)==1)
if(length(ntm)>0)
stop(paste('Please remove these subjects with only one time point:',
paste(names(ntm), collapse=', ')))
if (length(subjectID)!=nrow(feature_table))
stop('length of subjectID does not match feature_table!')
if (length(time_point)!=nrow(feature_table))
stop('length of time_point does not match feature_table!')
# get pseudo count
if (is.null(pseudo_count) & (transform %in% c("clr", "log_comp", "logit"))){
pseudo_count <- apply(feature_table, 1, function(x){
min(x[x!=0])/2
})
}
# keep taxon that has non-zeros in >1-threshold samples
feature_table <- feature_table[,colMeans(feature_table==0)<=threshold]
if(transform=='log_comp'){
feature_table <- feature_table+pseudo_count
feature_table <- t(log(feature_table/rowSums(feature_table)))
}else if(transform=='comp'){
feature_table <- feature_table
feature_table <- t(feature_table/rowSums(feature_table))
}else if(transform=='ast'){
feature_table <- feature_table
feature_table <- t(asin(sqrt(feature_table/rowSums(feature_table))))
}else if(transform=='clr'){
feature_table <- feature_table+pseudo_count
feature_table <- log(feature_table/rowSums(feature_table))
feature_table <- t(feature_table-rowMeans(feature_table))
}else if(transform=='logit'){
feature_table <- feature_table+pseudo_count
feature_table <- t(feature_table/rowSums(feature_table))
feature_table <- log(feature_table/(1-feature_table))
}else if(transform=='none'){
feature_table <- t(feature_table)
}else{
print('Input transformation method is wrong! log_comp is applied instead')
feature_table <- feature_table+pseudo_count
feature_table <- t(log(feature_table/rowSums(feature_table)))
}
feature_table <- rbind(time_point, feature_table)
rownames(feature_table)[1] <- 'time_point'
subID <- unique(subjectID)
nsub <- length(subID)
# construct list of data matrices, each element representing one subject
datlist <- vector("list", length = nsub)
names(datlist) <- subID
# Each slice represents an individual (unequal sized matrix).
for (i in 1:nsub){
# print(i)
datlist[[i]] <- feature_table[, subjectID==subID[i]]
datlist[[i]] <- datlist[[i]][,order(datlist[[i]][1,])]
datlist[[i]] <- datlist[[i]][,!duplicated(datlist[[i]][1,])]
}
return(datlist)
}
datlist_test <- format_tempted(count_test, meta_test$day_of_life, meta_test$studyid,
threshold=1, pseudo_count=0.5, transform="clr")
sub_test <- est_test_subject(datlist_test, res_tempted_train, mean_svd_train)
sub_test
?devtools::build()
roxygen2::roxygenise()
colnames(meta_Table)
colnames(meta_table)
apply(meta_table,2,type)
apply(meta_table,2,class)
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_readme()
?devtools::build_readme()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
?svd_centralize
?tempted_all
devtools::load_all()
?est_test_subject
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
devtools::document()
devtools::document()
?svd_centralize
roxygen2::roxygenise()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
?devtools::build_readme()
rm(list=ls())
roxygen2::roxygenise()
?devtools::build_readme()
devtools::build_readme()
?format_tempted
load_all()
check()
devtools::build_readme()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_readme()
use_readme_rmd()
devtools::use_readme_rmd()
library(devtools)
use_readme_rmd()
build_readme()
build_readme()
roxygen2::roxygenise()
roxygen2::roxygenise()
rm(list=ls())
devtools::build_readme()
ls()
devtools::build_readme()
roxygen2::roxygenise()
devtools::build_readme()
roxygen2::roxygenise()
devtools::build_readme()
devtools::build_readme()
getwd()
usethis::use_git()
usethis::use_github()
usethis::use_git()
git rm --cached path/to/file
usethis::use_git(path = "tempted")
usethis::use_git(path = "tempted/")
setwd()
getwd()
getwd()
usethis::use_git()
usethis::use_github("pixushi/tempted")
usethis::use_github("pixushi/tempted")
usethis::use_github("pixushi/")
usethis::use_github("pixushi")
usethis::use_github("pixushi")
build_manual(path="docs")
devtools::build_manual(path="docs")
devtools::build_manual(path="docs")
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
?facet_wrap
library(ggplot2)
?facet_wrap
devtools::build_readme()
proportion_table <- count_table/rowSums(count_table)
devtools::load_all()
proportion_table <- count_table/rowSums(count_table)
feat_names <- c("OTU4447072", "OTU4467447")
# individual samples
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
idvar=c("studyid","day_of_life") ,
v.names=c("value"), timevar="feature",
direction="wide")
colnames(tab_sel_feat)
?reshape
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
idvar=c("studyid","day_of_life") ,
varying=list(feat_names), timevar="feature",
direction="long")
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names), timevar="feature",
direction="long")
dim(tab_sel_feat)
head(tab_sel_feat)
table(tab_sel_feat$feature)
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names), timevar="feature", idvar="OTU",
direction="long")
head(tab_sel_feat)
list(feat_names)
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names), times=feat_names, timevar="feature",
direction="long")
head(tab_sel_feat)
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying="value", times=feat_names, timevar="feature",
direction="long")
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list("value"), times=feat_names, timevar="feature",
direction="long")
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names), times=feat_names, timevar="feature",
direction="long")
head(tab_sel_feat)
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat, idvar="RA",
varying=list(feat_names), times=feat_names, timevar="feature",
direction="long")
head(tab_sel_feat)
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat, v.names="RA",
varying=list(feat_names), times=feat_names, timevar="feature",
direction="long")
head(tab_sel_feat)
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,  times=feat_names, timevar="feature", v.names="RA",
direction="long")
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names), timevar="feature", v.names="RA",
direction="long")
head(tab_sel_feat)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names), times=feat_names, timevar="feature", v.names="RA",
direction="long")
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names), times=feat_names, timevar="feature", v.names="RA",
direction="long")
head(tab_sel_feat)
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names), times=feat_names, timevar="feature", v.names="RA",
ids=rownames(tab_sel_feat),
direction="long")
head(tab_sel_feat)
ggplot(data=tab_sel_feat) +
geom_point(aes(x=day_of_life, y=RA, color=delivery)) +
facet_wrap(vars(feature)) +
labs(x="Day of Life", y="Relative Abundance")
proportion_table <- count_table/rowSums(count_table)
feat_names <- c("OTU4447072", "OTU4467447")
# individual samples
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names), times=feat_names, timevar="feature", v.names="RA",
ids=rownames(tab_sel_feat),
direction="long")
p_topfeat <- ggplot(data=tab_sel_feat) +
geom_point(aes(x=day_of_life, y=RA, color=delivery)) +
facet_wrap(vars(feature)) +
labs(x="Day of Life", y="Relative Abundance") +
coord_trans(y="sqrt")
# summary plot
p_topfeat_summary <- plot_feature_summary(proportion_table[,feat_names],
meta_table$delivery,
bws=30) +
labs(x="Day of Life", y="Relative Abundance") +
coord_trans(y="sqrt")
head(plot_feature_summary())
head(plot_feature_summary)
proportion_table <- count_table/rowSums(count_table)
feat_names <- c("OTU4447072", "OTU4467447")
# individual samples
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names),
times=feat_names,
timevar="feature",
v.names="RA",
ids=rownames(tab_sel_feat),
direction="long")
p_topfeat <- ggplot(data=tab_sel_feat) +
geom_point(aes(x=day_of_life, y=RA, color=delivery)) +
facet_wrap(vars(feature)) +
labs(x="Day of Life", y="Relative Abundance") +
coord_trans(y="sqrt")
# summary plot
p_topfeat_summary <- plot_feature_summary(proportion_table[,feat_names],
meta_table$day_of_life,
meta_table$delivery,
bws=30) +
labs(x="Day of Life", y="Relative Abundance") +
coord_trans(y="sqrt")
grid.arrange(p_topfeat, p_topfeat_summary, nrow=1)
library(gridExtra)
proportion_table <- count_table/rowSums(count_table)
feat_names <- c("OTU4447072", "OTU4467447")
# individual samples
tab_sel_feat <- cbind(proportion_table[,feat_names], meta_table)
tab_sel_feat <- reshape(tab_sel_feat,
varying=list(feat_names),
times=feat_names,
timevar="feature",
v.names="RA",
ids=rownames(tab_sel_feat),
direction="long")
p_topfeat <- ggplot(data=tab_sel_feat) +
geom_point(aes(x=day_of_life, y=RA, color=delivery)) +
facet_wrap(vars(feature)) +
labs(x="Day of Life", y="Relative Abundance") +
coord_trans(y="sqrt")
# summary plot
p_topfeat_summary <- plot_feature_summary(proportion_table[,feat_names],
meta_table$day_of_life,
meta_table$delivery,
bws=30) +
labs(x="Day of Life", y="Relative Abundance") +
coord_trans(y="sqrt")
grid.arrange(p_topfeat, p_topfeat_summary, nrow=1)
ggplot(data=tab_sel_feat) +
geom_point(aes(x=day_of_life, y=RA, color=delivery)) +
facet_wrap(vars(feature)) +
labs(x="Day of Life", y="Relative Abundance") +
coord_trans(y="sqrt")
plot_feature_summary(proportion_table[,feat_names],
meta_table$day_of_life,
meta_table$delivery,
bws=30) +
labs(x="Day of Life", y="Relative Abundance") +
coord_trans(y="sqrt")
plot_feature_summary(proportion_table[,feat_names],
meta_table$day_of_life,
meta_table$delivery,
bws=30) +
labs(x="Day of Life", y="Relative Abundance")
devtools::build_readme()
devtools::build_readme()
devtools::install_github("pixushi/tempted)
)
""
"
devtools::install_github("pixushi/tempted")
library(tempted)
res_count <- tempted_all(count_table,
meta_table$day_of_life,
meta_table$studyid,
threshold=0.95,
transform="clr",
pseudo_count=0.5,
r=2,
smooth=1e-5,
pct.ratio=0.1,
pct.aggregate=1)
